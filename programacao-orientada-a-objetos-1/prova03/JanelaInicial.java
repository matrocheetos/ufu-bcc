package prova03;

import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

public class JanelaInicial extends javax.swing.JFrame {

    /**
     * Creates new form Janela
     */
    public JanelaInicial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        acomodacao = new javax.swing.JButton();
        hospede = new javax.swing.JButton();
        reserva = new javax.swing.JButton();
        sair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        acomodacao.setText("Cadastrar acomodação");
        acomodacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acomodacaoActionPerformed(evt);
            }
        });

        hospede.setText("Cadastrar hóspede");
        hospede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospedeActionPerformed(evt);
            }
        });

        reserva.setText("Solicitar reserva");
        reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservaActionPerformed(evt);
            }
        });

        sair.setText("Sair do hotel");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(acomodacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hospede, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(acomodacao)
                .addGap(18, 18, 18)
                .addComponent(hospede)
                .addGap(18, 18, 18)
                .addComponent(reserva)
                .addGap(18, 18, 18)
                .addComponent(sair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acomodacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acomodacaoActionPerformed
        JanelaAcomodacao a = new JanelaAcomodacao(this);
        a.setVisible(true);
    }//GEN-LAST:event_acomodacaoActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        String cpfCadastro = JOptionPane.showInputDialog("CPF do cliente:");
        
        if(reservas.containsKey(cpfCadastro)) {
            String nroAcomodacao = reservas.get(cpfCadastro).getNumero_acomodacao();
            if(acomodacoes.get(nroAcomodacao).isStatus()) { // se estiver ocupado
                boolean temDesconto = hospedes.containsKey(cpfCadastro);
                String msg = "Valor total: "+acomodacoes.get(nroAcomodacao).valorTotal(temDesconto);
                JOptionPane.showMessageDialog(null, msg, "Saída", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Quarto não foi reservado", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Não foram feitas reservas", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_sairActionPerformed

    private void hospedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospedeActionPerformed
        JanelaHospede h = new JanelaHospede(this);
        h.setVisible(true);
    }//GEN-LAST:event_hospedeActionPerformed

    private void reservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservaActionPerformed
        
        String cpfCadastro = null;
        boolean tem_cadastro = false;
        int isCadastrado = JOptionPane.showConfirmDialog(null,"Hóspede é cadastrado?","Entrada",
                                                        JOptionPane.YES_NO_OPTION);
        if(isCadastrado == JOptionPane.YES_OPTION) {
            try {
            Object[] possibleValuesH = hospedes.keySet().toArray();
            Object selectedValueH = JOptionPane.showInputDialog(null,
                                                            "Escolha um hóspede", "Entrada",
                                                            JOptionPane.INFORMATION_MESSAGE,
                                                            null, possibleValuesH,
                                                            possibleValuesH[0]);
            cpfCadastro = hospedes.get((String)selectedValueH).getCPF();
            tem_cadastro = true;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Nenhum hóspede registrado", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else if (isCadastrado == JOptionPane.NO_OPTION) {
            cpfCadastro = JOptionPane.showInputDialog("CPF do hóspede:");
            tem_cadastro = false;
        } else return;
        
        SpinnerNumberModel sModel = new SpinnerNumberModel(0, 0, 30, 1);
        JSpinner spinner = new JSpinner(sModel);
        int nro_hospedes = JOptionPane.showOptionDialog(null,spinner,"Número de hóspedes:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        
        String data_entrada = JOptionPane.showInputDialog("Data de entrada:");
        String data_saida = JOptionPane.showInputDialog("Data de saída:");
        
        // filtra as acomodacoes possiveis
        Object[] chaves = acomodacoes.keySet().toArray();
        ArrayList possibleValuesA_al = new ArrayList();
        for(int i=0;i<acomodacoes.size();i++){
            if(acomodacoes.get((String)chaves[i]).getCapacidade() >= nro_hospedes
               && acomodacoes.get((String)chaves[i]).isStatus() == false ) {
                possibleValuesA_al.add(chaves[i]);
            }
        }
        if(possibleValuesA_al.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhuma acomodação disponível", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Object[] possibleValuesA = possibleValuesA_al.toArray(); // array com acomodacoes possiveis
        Object selectedValueA = JOptionPane.showInputDialog(null,
                                                        "Escolha uma acomodação", "Entrada",
                                                        JOptionPane.INFORMATION_MESSAGE,
                                                        null, possibleValuesA,
                                                        possibleValuesA[0]);
        acomodacoes.get((String)selectedValueA).setStatus(true);
        
        Reserva r = new Reserva(cpfCadastro, acomodacoes.get((String)selectedValueA).getNumero(),
                                data_entrada, data_saida, tem_cadastro);
        insereReserva(r);
        
        JOptionPane.showMessageDialog(null, "Reserva realizada", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_reservaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaInicial().setVisible(true);
            }
        });
    }
    
    private TreeMap<String,Acomodacao> acomodacoes = new TreeMap<>();
    private TreeMap<String,Hospede> hospedes = new TreeMap<>();
    private TreeMap<String,Reserva> reservas = new TreeMap<>();
    
    public void insereAcomodacao(Acomodacao a) {
        acomodacoes.put(a.getNumero(), a);
        a.salvarArquivo();
    }
    
    public void insereHospede(Hospede h) {
        hospedes.put(h.getCPF(), h);
        h.salvarArquivo();
    }
    
    public void insereReserva(Reserva r) {
        reservas.put(r.getCpf_hospede(), r);
        r.salvarArquivo();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acomodacao;
    private javax.swing.JButton hospede;
    private javax.swing.JButton reserva;
    private javax.swing.JButton sair;
    // End of variables declaration//GEN-END:variables
}
